set runtimepath+=~/.vim
let &packpath = &runtimepath

set nocompatible
filetype off

call plug#begin('~/.vim/plugged')
    Plug 'morhetz/gruvbox'
	Plug 'itchyny/lightline.vim'
	Plug 'junegunn/vim-peekaboo'
	Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
	Plug 'junegunn/fzf.vim'
	Plug 'junegunn/vim-peekaboo'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-commentary'
    Plug 'andymass/vim-matchup'
	Plug 'preservim/tagbar'
	Plug 'jiangmiao/auto-pairs'
	Plug 'OmniSharp/omnisharp-vim'
	Plug 'nickspoons/vim-sharpenup'
	Plug 'dense-analysis/ale'
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

filetype plugin indent on

set autoindent
set backspace=indent,eol,start
set clipboard=unnamed,unnamedplus
set colorcolumn=120
set completeopt+=menuone,noinsert
set encoding=utf-8
set expandtab
set go=c
set grepprg=rg\ --vimgrep\ --smart-case\ --follow
set guifont=Courier_New:h12:cDEFAULT
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set nobackup
set noerrorbells
set nojoinspaces
set noshowmode
set noswapfile
set nowrap
set pumheight=10
set scrolloff=8
set shiftwidth=4
set showcmd
set smartcase
set smartindent
set softtabstop=4
set tabstop=4
set wildmenu
set wildmode=longest:list,full

syntax on

filetype plugin indent on

if has('gui_running')
	set guioptions-=m
	set guioptions-=T
	set guioptions-=r
    set guioptions-=L
endif


let g:gruvbox_italic='0'
colorscheme gruvbox
set background=dark

" smart search and replace
noremap ;; :%s:::g<Left><Left><Left>
noremap ;' :%s:::cg<Left><Left><Left>

" window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" moving lines of text
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" (gui-mode only) tab navigation like browser.
nnoremap <C-S-Tab> :tabprevious<CR>
nnoremap <C-Tab> :tabnext<CR>
inoremap <C-S-Tab> <Esc>:tabprevious<CR>i
inoremap <C-Tab> <Esc>:tabnext<CR>i

" navigate the completion list using <tab>
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" mapping space as leader
let mapleader = " "

" clear highlights
nnoremap <Leader>l :nohlsearch<CR>

" mapping netrw toggle and tagbar
map  <Leader>e 	:call ToggleNetrw()<CR>
map  <Leader>T  :TagbarToggle<CR>

" add a line break after/before current line
nnoremap <Leader>o o<ESC>
nnoremap <Leader>O O<ESC>

" change directory to current file
nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>


" sharpenup and lightline settings
let g:sharpenup_statusline_opts = 'â€¢'
let g:sharpenup_create_mappings = 0

let g:lightline = {
	\ 'active': {
	\   'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype', 'sharpenup']]
	\ },
	\ 'inactive': {
	\   'right': [['lineinfo'], ['percent'], ['sharpenup']]
	\ },
	\ 'component': {
	\   'sharpenup': sharpenup#statusline#Build()
	\ }
	\}

augroup lightline_integration
  autocmd!
  autocmd User OmniSharpStarted,OmniSharpReady,OmniSharpStopped call lightline#update()
augroup END


" fzf settings
nnoremap <silent> <C-p>         :Files<CR>
nnoremap <silent> <Leader>F     :Rg<CR>
nnoremap <silent> <Leader>b     :Buffers<CR>
" ripgrep as search engine
command! -bang -nargs=* Rg call fzf#vim#grep(
	\   'rg --column --line-number --no-heading --color=always --smart-case -- '
	\	.shellescape(<q-args>), 1,
	\   fzf#vim#with_preview(), <bang>0)
" reverse fzf layout
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse', '--info=inline']}, <bang>0)o=inline', '--preview', 'cat {}']}, <bang>0)


" auto pairs settings
let g:AutoPairsFlyMode = 1


" ale settings
let g:ale_sign_column_always=1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_linters = { 'cs': ['OmniSharp'] }


function! GoCoc()
	" use <tab> for trigger completion and navigate to the next complete item
	function! s:check_back_space() abort
		let col = col('.') - 1
		return !col || getline('.')[col - 1]  =~ '\s'
	endfunction

	inoremap <silent><expr> <Tab>
				\ pumvisible() ? "\<C-n>" :
				\ <SID>check_back_space() ? "\<Tab>" :
				\ coc#refresh()

	" use <c-space> for trigger completion
	inoremap <silent><expr> <c-space> coc#refresh()

	" code navigation.
	nmap <silent> <buffer> <Leader>gd <Plug>(coc-definition)
	nmap <silent> <buffer> <Leader>gy <Plug>(coc-type-definition)
	nmap <silent> <buffer> <Leader>gi <Plug>(coc-implementation)
	nmap <silent> <buffer> <Leader>gu <Plug>(coc-references)
	nmap <silent> <buffer> <Leader>rn <Plug>(coc-rename)
endfunction


" omnisharp settings
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_selector_ui = 'fzf'
let g:OmniSharp_highlighting = 0
let g:OmniSharp_selector_findusages = 'fzf'
let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding'  : [1],
\ 'border'   : [1],
\ 'maxheight': 30
\}
function! GoOmnisharp()
	" code navigation.
	nmap <silent> <buffer> <Leader>gd	<Plug>(omnisharp_go_to_definition)
	nmap <silent> <buffer> <Leader>gi	<Plug>(omnisharp_find_implementations)
	nmap <silent> <buffer> <Leader>gu	<Plug>(omnisharp_find_usages)
	nmap <silent> <buffer> <Leader>gs	<Plug>(omnisharp_find_symbol)
	nmap <silent> <buffer> <Leader>gy	<Plug>(omnisharp_find_type)
	nmap <silent> <buffer> <Leader>gm	<Plug>(omnisharp_find_members)

	nmap <silent> <buffer> <Leader>pd	<Plug>(omnisharp_preview_definition)
	nmap <silent> <buffer> <Leader>pi	<Plug>(omnisharp_preview_implementations)
	nmap <silent> <buffer> <Leader>pt 	<Plug>(omnisharp_type_lookup)

	nmap <silent> <buffer> <Leader>fu	<Plug>(omnisharp_fix_usings)
	nmap <silent> <buffer> <Leader>fc 	<Plug>(omnisharp_code_format)
	nmap <silent> <buffer> <Leader>rn  	<Plug>(omnisharp_rename)

	nmap <silent> <buffer> <C-\> 		<Plug>(omnisharp_signature_help)
	imap <silent> <buffer> <C-\> 		<Plug>(omnisharp_signature_help)

	nmap <silent> <buffer> [[ 			<Plug>(omnisharp_navigate_up)
	nmap <silent> <buffer> ]] 			<Plug>(omnisharp_navigate_down)

	nmap <silent> <buffer> <Leader>. 	<Plug>(omnisharp_code_action_repeat)
	xmap <silent> <buffer> <Leader>. 	<Plug>(omnisharp_code_action_repeat)

	nmap <silent> <buffer> <Leader>osrt <Plug>(omnisharp_restart_server)
	nmap <silent> <buffer> <Leader>osst <Plug>(omnisharp_start_server)
	nmap <silent> <buffer> <Leader>ossp <Plug>(omnisharp_stop_server)
endfunction
autocmd FileType cs :call GoOmnisharp()
autocmd FileType cpp,cxx,h,hpp,c :call GoCoc()


" netrw settings
let g:netrw_banner=0
let g:netrw_liststyle=3
let g:netrw_browse_split=3
let g:netrw_altv=1
let g:netrw_winsize=18
let g:netrw_preview=1

" hide the dot files on startup
let ghregex='\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide=ghregex

let g:NetrwIsOpen=0
function! ToggleNetrw()
    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Lexplore
    endif
endfunction


" file numbering
set nu rnu
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END


" command to remove file
command! -complete=file -nargs=1 Remove :echo 'Remove: '.'<f-args>'.' '
	\	.(delete(<f-args>) == 0 ? 'SUCCEEDED' : 'FAILED')


" open help documentation in vertical split window
augroup vimrc_help
  autocmd!
  autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END


" visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
